/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  OptionTrigger,
  OptionTriggerInterface,
} from "../../contracts/OptionTrigger";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_erc20Pool",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "optionId",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "holder",
        type: "address",
      },
    ],
    name: "OptionCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "optionId",
        type: "address",
      },
    ],
    name: "OptionExecuted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "strike",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "premium",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "period",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "paymentToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "optionToken",
        type: "address",
      },
    ],
    name: "createOption",
    outputs: [
      {
        internalType: "uint256",
        name: "optionID",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "options",
    outputs: [
      {
        internalType: "enum OptionTrigger.State",
        name: "state",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "seller",
        type: "address",
      },
      {
        internalType: "address",
        name: "buyer",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "strike",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "premium",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "expiration",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "paymentToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "optionToken",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "users",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001464380380620014648339818101604052810190620000379190620001d5565b620000576200004b6200009f60201b60201c565b620000a760201b60201c565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000207565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200019d8262000170565b9050919050565b620001af8162000190565b8114620001bb57600080fd5b50565b600081519050620001cf81620001a4565b92915050565b600060208284031215620001ee57620001ed6200016b565b5b6000620001fe84828501620001be565b91505092915050565b61124d80620002176000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063409e22051461006757806354a02f9e1461009f578063715018a6146100cf5780638da5cb5b146100d95780639f6c43d6146100f7578063f2fde38b14610127575b600080fd5b610081600480360381019061007c9190610a7b565b610143565b60405161009699989796959493929190610b6f565b60405180910390f35b6100b960048036038101906100b49190610c28565b61022e565b6040516100c69190610c68565b60405180910390f35b6100d761025f565b005b6100e1610273565b6040516100ee9190610c83565b60405180910390f35b610111600480360381019061010c9190610c9e565b61029c565b60405161011e9190610c68565b60405180910390f35b610141600480360381019061013c9190610d2b565b610873565b005b6001818154811061015357600080fd5b90600052602060002090600802016000915090508060000160009054906101000a900460ff16908060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030154908060040154908060050154908060060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905089565b6003602052816000526040600020818154811061024a57600080fd5b90600052602060002001600091509150505481565b6102676108f6565b6102716000610974565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600082600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361030e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161030590610db5565b60405180910390fd5b82600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361037e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037590610db5565b60405180910390fd5b600089116103c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103b890610e21565b60405180910390fd5b60008811610404576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103fb90610e8d565b60405180910390fd5b6201518086101561044a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044190610ef9565b60405180910390fd5b6224ea00861115610490576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048790610f65565b60405180910390fd5b60008473ffffffffffffffffffffffffffffffffffffffff166323b872dd33600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168c6040518463ffffffff1660e01b81526004016104f193929190610f85565b6020604051808303816000875af1158015610510573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105349190610ff4565b905080610576576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056d9061106d565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663282d3fdf868b6040518363ffffffff1660e01b81526004016105d392919061108d565b600060405180830381600087803b1580156105ed57600080fd5b505af1158015610601573d6000803e3d6000fd5b50505050600180549050935060016040518061012001604052806000600281111561062f5761062e610aa8565b5b81526020013373ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020018c81526020018b81526020018a8152602001894261068b91906110e5565b81526020018873ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff16815250908060018154018082558091505060019003906000526020600020906008020160009091909190915060008201518160000160006101000a81548160ff0219169083600281111561071a57610719610aa8565b5b021790555060208201518160000160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600201556080820151816003015560a0820151816004015560c0820151816005015560e08201518160060160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506101008201518160070160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050509695505050505050565b61087b6108f6565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036108ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e19061118b565b60405180910390fd5b6108f381610974565b50565b6108fe610a38565b73ffffffffffffffffffffffffffffffffffffffff1661091c610273565b73ffffffffffffffffffffffffffffffffffffffff1614610972576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610969906111f7565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600080fd5b6000819050919050565b610a5881610a45565b8114610a6357600080fd5b50565b600081359050610a7581610a4f565b92915050565b600060208284031215610a9157610a90610a40565b5b6000610a9f84828501610a66565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110610ae857610ae7610aa8565b5b50565b6000819050610af982610ad7565b919050565b6000610b0982610aeb565b9050919050565b610b1981610afe565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b4a82610b1f565b9050919050565b610b5a81610b3f565b82525050565b610b6981610a45565b82525050565b600061012082019050610b85600083018c610b10565b610b92602083018b610b51565b610b9f604083018a610b51565b610bac6060830189610b60565b610bb96080830188610b60565b610bc660a0830187610b60565b610bd360c0830186610b60565b610be060e0830185610b51565b610bee610100830184610b51565b9a9950505050505050505050565b610c0581610b3f565b8114610c1057600080fd5b50565b600081359050610c2281610bfc565b92915050565b60008060408385031215610c3f57610c3e610a40565b5b6000610c4d85828601610c13565b9250506020610c5e85828601610a66565b9150509250929050565b6000602082019050610c7d6000830184610b60565b92915050565b6000602082019050610c986000830184610b51565b92915050565b60008060008060008060c08789031215610cbb57610cba610a40565b5b6000610cc989828a01610a66565b9650506020610cda89828a01610a66565b9550506040610ceb89828a01610a66565b9450506060610cfc89828a01610a66565b9350506080610d0d89828a01610c13565b92505060a0610d1e89828a01610c13565b9150509295509295509295565b600060208284031215610d4157610d40610a40565b5b6000610d4f84828501610c13565b91505092915050565b600082825260208201905092915050565b7f5a65726f20616464726573730000000000000000000000000000000000000000600082015250565b6000610d9f600c83610d58565b9150610daa82610d69565b602082019050919050565b60006020820190508181036000830152610dce81610d92565b9050919050565b7f537472696b6520697320746f6f20736d616c6c00000000000000000000000000600082015250565b6000610e0b601383610d58565b9150610e1682610dd5565b602082019050919050565b60006020820190508181036000830152610e3a81610dfe565b9050919050565b7f416d6f756e7420697320746f6f20736d616c6c00000000000000000000000000600082015250565b6000610e77601383610d58565b9150610e8282610e41565b602082019050919050565b60006020820190508181036000830152610ea681610e6a565b9050919050565b7f506572696f6420697320746f6f2073686f727400000000000000000000000000600082015250565b6000610ee3601383610d58565b9150610eee82610ead565b602082019050919050565b60006020820190508181036000830152610f1281610ed6565b9050919050565b7f506572696f6420697320746f6f206c6f6e670000000000000000000000000000600082015250565b6000610f4f601283610d58565b9150610f5a82610f19565b602082019050919050565b60006020820190508181036000830152610f7e81610f42565b9050919050565b6000606082019050610f9a6000830186610b51565b610fa76020830185610b51565b610fb46040830184610b60565b949350505050565b60008115159050919050565b610fd181610fbc565b8114610fdc57600080fd5b50565b600081519050610fee81610fc8565b92915050565b60006020828403121561100a57611009610a40565b5b600061101884828501610fdf565b91505092915050565b7f5472616e73666572206e6f7420706f7369626c65000000000000000000000000600082015250565b6000611057601483610d58565b915061106282611021565b602082019050919050565b600060208201905081810360008301526110868161104a565b9050919050565b60006040820190506110a26000830185610b51565b6110af6020830184610b60565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006110f082610a45565b91506110fb83610a45565b9250828201905080821115611113576111126110b6565b5b92915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611175602683610d58565b915061118082611119565b604082019050919050565b600060208201905081810360008301526111a481611168565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006111e1602083610d58565b91506111ec826111ab565b602082019050919050565b60006020820190508181036000830152611210816111d4565b905091905056fea2646970667358221220057412e6160d1c9d6a8a5c3166a2b2de0bb6f08bfdaccbe915be90d61e1bdcfb64736f6c63430008110033";

type OptionTriggerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OptionTriggerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class OptionTrigger__factory extends ContractFactory {
  constructor(...args: OptionTriggerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _erc20Pool: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<OptionTrigger> {
    return super.deploy(_erc20Pool, overrides || {}) as Promise<OptionTrigger>;
  }
  override getDeployTransaction(
    _erc20Pool: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_erc20Pool, overrides || {});
  }
  override attach(address: string): OptionTrigger {
    return super.attach(address) as OptionTrigger;
  }
  override connect(signer: Signer): OptionTrigger__factory {
    return super.connect(signer) as OptionTrigger__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OptionTriggerInterface {
    return new utils.Interface(_abi) as OptionTriggerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): OptionTrigger {
    return new Contract(address, _abi, signerOrProvider) as OptionTrigger;
  }
}
